import Numeric
import Data.Char
import Data.List
import Data.String.Utils

preCode = [
	"[bits 32]",
	"wow64Precode:",
	"push 0x33",
	"call _wow64_delta",
	"_wow64_delta:",
	"sub dword [esp], _wow64_delta",
	"add dword [esp], _wow64_code64",
	"call far [esp]",
	"pop eax",
	"pop eax",
	"ret",
	"[bits 64]",
	"default rel",
	"_wow64_code64:",
	"push rbp",
	"mov rbp, rsp",
	"and rsp, 0xFFFFFFFFFFFFFFE0",
	"sub rsp, 8",
	"call _wow64_Start",
	"mov rsp, rbp",
	"pop rbp",
	"[bits 32]",
	"retf",
	"[bits 64]"
	]
	
postCode = [
	"_wow64_Shellcode64:"
	]

main :: IO ()
main = interact (unlines . parse . lines)

parse :: [String] -> [String]
parse x = preCode ++ concatMap (parseLine . filter (/= "PTR") . words) x ++ postCode

octalmap = [ ("\", " ++ show x ++ ",\"", "\\" ++ showIntAtBase 8 intToDigit x "") | x <- [255, 254 .. 0] ]
replaceOct s = foldl (\(a, _) (x, y) -> (replace y x a, "")) (s, "") octalmap

parseLine :: [String] -> [String]
parseLine (('/':_):_) = []
parseLine (('#':_):_) = []
parseLine (".align":xs) = ["align 16"]
parseLine (".ascii":xs) = ["db " ++ fst (replaceOct (replace "\\\\" "\", 92, \"" (unwords xs)))]
parseLine ("call" : "___chkstk_ms" : _) = []
parseLine (('.':xs):_)
	| (xs !! (length xs - 1)) /= ':' = []
	| otherwise = [ "_wow64_" ++ xs ]
parseLine xs = parse2 $ map fixAddressing xs

fixAddressing xs = replace "." "_wow64_" (replace "+-" "-" (replace "rip+" "" f))
	where
		f
			| head xs /= '[' && any (== '[') xs = (takeWhile g (dropWhile h xs)) ++ "+" ++ takeWhile h xs ++ dropWhile g xs
			| otherwise = xs
		g = (/= ']')
		h = (/= '[')

parse2 ("call" : "[QWORD" : xs) = ["call " ++ take (length (head xs) - 1) (head xs)]
parse2 xs
	| length xs == 2 = fixShift xs
	| otherwise = [unwords xs]
		
fixShift ("shr":b:_) = [ "shr " ++ b ++ ", 1" ]
fixShift ("shl":b:_) = [ "shl " ++ b ++ ", 1" ]	
fixShift xs = [unwords xs]

