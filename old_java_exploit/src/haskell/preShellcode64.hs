import Numeric
import Data.Char
import Data.List
import Data.String.Utils

preCode = [
	"[bits 64]",
	"default rel",
	"realStart:",
	"call preStart",
	"ret:",
	"preStart:",
	"pop rsi",
	"sub rsi, ret",
	"mov rax, qword [realStart-8]",
	"push rbx",
	"mov rbx, qword [realStart-32]",
	"mov qword [rax], rbx",
	"sub rsp, 40",
	"call rbx",
	"mov rbx, rax",
	"lea rcx, [sKernel32]",
	"call [realStart-24]",
	"mov rcx, rax",
	"lea rdx, [sCreateThread]",
	"call [realStart-16]",
	"xor rcx, rcx",
	"xor rdx, rdx",
	"lea r8, [Start]",
	"mov r9, rsi",
	"push rcx",
	"push rcx",
	"call rax",
	"add rsp, 56",
	"mov rax, rbx",
	"pop rbx",
	"ret",
	"sKernel32     db \"kernel32.dll\", 0",
	"sCreateThread db \"CreateThread\", 0"
	]

main :: IO ()
main = interact (unlines . parse . lines)

parse :: [String] -> [String]
parse x = preCode ++ concatMap (parseLine . filter (/= "PTR") . words) x

octalmap = [ ("\", " ++ show x ++ ",\"", "\\" ++ showIntAtBase 8 intToDigit x "") | x <- [255, 254 .. 0] ]
replaceOct s = foldl (\(a, _) (x, y) -> (replace y x a, "")) (s, "") octalmap

parseLine :: [String] -> [String]
parseLine (".align":xs) = ["align 16"]
parseLine (".ascii":xs) = ["db " ++ fst (replaceOct (replace "\\\\" "\", 92, \"" (unwords xs)))]
parseLine (('.':xs):_)
	| (xs !! (length xs - 1)) /= ':' = []
	| otherwise = [ xs ]
parseLine xs = parse2 $ map fixAddressing xs

fixAddressing xs = replace "." "" (replace "+-" "-" (replace "rip+" "" f))
	where
		f
			| head xs /= '[' && any (== '[') xs = (takeWhile g (dropWhile h xs)) ++ "+" ++ takeWhile h xs ++ dropWhile g xs
			| otherwise = xs
		g = (/= ']')
		h = (/= '[')

parse2 ("call" : "[QWORD" : xs) = ["call " ++ take (length (head xs) - 1) (head xs)]
parse2 xs
	| length xs == 2 = fixShift xs
	| otherwise = [unwords xs]
		
fixShift ("shr":b:_) = [ "shr " ++ b ++ ", 1" ]
fixShift ("shl":b:_) = [ "shl " ++ b ++ ", 1" ]	
fixShift xs = [unwords xs]

